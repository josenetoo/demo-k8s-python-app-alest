name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      - name: Get version
        id: get_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: |
            josenetoalest/demo-python:latest
            josenetoalest/demo-python:${{ steps.get_version.outputs.VERSION }}
            josenetoalest/demo-python:${{ steps.get_version.outputs.VERSION }}-arm64
          cache-from: type=registry,ref=josenetoalest/demo-python:buildcache
          cache-to: type=registry,ref=josenetoalest/demo-python:buildcache,mode=max

      - name: Update Kubernetes manifests
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # Use the version manager script to update the deployment manifest
          # The script handles both updating version.txt and the Kubernetes manifest
          chmod +x ./scripts/version-manager.sh
          
          # Configure Git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Update the deployment manifest with the current version
          # No need to increment the version since we're just ensuring consistency
          sed -i "s|josenetoalest/demo-python:.*-arm64|josenetoalest/demo-python:${VERSION}-arm64|g" kubernetes/hello-deployment.yaml
          
          # Commit and push changes if there are any
          git add kubernetes/hello-deployment.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit - deployment manifest already up to date"
          else
            git commit -m "ci: Update deployment image to version ${VERSION}-arm64"
            git push
            echo "Successfully updated deployment manifest with new image tag: ${VERSION}-arm64"
          fi
